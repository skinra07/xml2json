Rules of Mapping file:

Mapping file in json format is used as translation to update jsonObject. Java code basically read mapping file and intelligently make decision to update xml data and convert to json format. Input file and mapping file are depend on each other. Below is a an example mapping file and xml file to be updated:

XML file
<?xml version="1.0" encoding="UTF-8"?>
<patients>
  <patient>
       <id>1234</id>
       <gender>m</gender>
       <name>John Smith</name>
       <state>Michigan</state>
       <dateOfBirth>03/04/1962</dateOfBirth >
  </patient>
  <patient>
       <id>5678</id>
       <gender>f</gender>
       <name>Jane Smith</name>
       <state>Ohio</state>
       <dateOfBirth>08/24/1971</dateOfBirth>
  </patient>
</patients>



Mapping file:

{
  "updates":
   [
      {
        "path": "/patients/patient",  
        "mode": "update",
        "modifyType" : "name",
        "actions" :
        [
          {
            "fieldName": "gender",
            "idx": "-1",
            "match": null,
            "modifyTo": "sex"
          }
		]
		},
		{
       "path": "/patients/patient",
       "mode": "update",
       "modifyType" : "value",
       "actions" :
       [
         {
           "fieldName": "sex",   [2]
           "idx": "-1",
           "match":
           {
             "activity" : "replace",
             "condition": "equals",
             "pattern": "m"
           },
           "modifyTo": "male"
         },
          {
           "fieldName": "state",  [3]
           "idx": "0",
           "match": null,
           "modifyTo": "MI"
         },
         {
           "fieldName": "state",  [4]
           "idx": "1",
           "match":
           {
             "activity" : "stateAbbr"
           },
           "modifyTo": null
         }
       ]
     },
     {
       "path": "/patients/patient",
       "mode": "update",
       "modifyType": "type",
       "actions": [
         {
           "fieldName": "age", [6]
           "idx": "-1",
           "match":
           {
             "activity" : "convert",
             "condition": "integer"
           },
           "modifyTo": null
         }
       ]
     }
   ]
}
 
path: This is used to reference particular fields we want to update. Using example above path="/patients/patient" means updating any fields under "/patients/patient" path.
mode: Currently we want to update the fields. In future we can include 'add'/'delete'
modifyType: This one has types: name, value, type. Using xml file, <id>5678</id>, <id> means name, 5678 means value, and type means data type of 5678 which in integer.
actions: This node describe kind of action we want to take in <id>5678</id>
fieldName: field(key) want to update. In this case id.
idx: If there are multiple <patient> then it reference which particular <patient> we want to update. In array terms, idx reference array index number. If idx = 0, it is first <patient>. If idx=1, then it is second <patient>.
     If idx=-1, then it telling java application to update list of all <patient>
modifyTo: It means updated to new value. If it is not null then any value modifyTo contains will reference new updated value.
match: It has more conditions to update values.  For instance, lets go over mapping file:

Mapping file with [1] : match is null. It means there is no extra condition. This map section describe as updating field name "gender" to "sex". It has idx=-1 and that means do that for all <patient>.
                  [2] : match is null. This map section describe as updating field value (modifyType=value) of field name "sex" (Using Step [1], "gender" is updated to "sex"). Activity is 'replace' with condition as 'equals'.
                        It tells Java application to call replace function. In function, it says if existing value of sex equals 'm' then update this value will modifyTo as 'male'. And idx=-1, means do it for all <patient>
                  [3 & 4] : These steps show alternate way to replace state abbr. [3] is just regualr way to replace value of field name 'state'. [4] is more automated way to replae 'state' value.

